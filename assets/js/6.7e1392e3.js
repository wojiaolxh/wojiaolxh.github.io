(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{386:function(t,a,s){t.exports=s.p+"assets/img/Cache.88e0c2c8.png"},404:function(t,a,s){"use strict";s.r(a);var r=s(54),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"浏览器输入url"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器输入url"}},[t._v("#")]),t._v(" 浏览器输入URL")]),t._v(" "),r("h3",{attrs:{id:"一个页面从输入-url-到页面加载显示完成-这个过程中都发生了什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一个页面从输入-url-到页面加载显示完成-这个过程中都发生了什么"}},[t._v("#")]),t._v(" 一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？")]),t._v(" "),r("ol",[r("li",[t._v("浏览器的地址栏输入URL并按下回车。")]),t._v(" "),r("li",[t._v("浏览器查找当前URL是否存在缓存，并比较缓存是否过期。")]),t._v(" "),r("li",[t._v("DNS解析URL对应的IP。")]),t._v(" "),r("li",[t._v("根据IP建立TCP连接（三次握手）。")]),t._v(" "),r("li",[t._v("HTTP发起请求。")]),t._v(" "),r("li",[t._v("服务器处理请求，浏览器接收HTTP响应。")]),t._v(" "),r("li",[t._v("渲染页面，构建DOM树。")]),t._v(" "),r("li",[t._v("关闭TCP连接（四次挥手）。")])]),t._v(" "),r("h2",{attrs:{id:"_1-url"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-url"}},[t._v("#")]),t._v(" 1. URL")]),t._v(" "),r("p",[t._v("输入URL后，会进行解析（URL的本质就是统一资源定位符）\nURL一般包括几大部分：")]),t._v(" "),r("ul",[r("li",[t._v("protocol，协议头，譬如有http，加密的https，ftp等")]),t._v(" "),r("li",[t._v("host，主机域名或IP地址")]),t._v(" "),r("li",[t._v("port，端口号（通常端口号不常见是因为大部分的都是使用默认的端口所以隐藏，如HTTP默认端口80，HTTPS默认端口443。）")]),t._v(" "),r("li",[t._v("path，目录路径")]),t._v(" "),r("li",[t._v("query，即查询参数")]),t._v(" "),r("li",[t._v("fragment，即#后的hash值，一般用来定位到某个位置")])]),t._v(" "),r("h2",{attrs:{id:"_2-缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-缓存"}},[t._v("#")]),t._v(" 2. 缓存")]),t._v(" "),r("p",[t._v("根据下图的逻辑，判断是直接使用缓存内容还是重新向服务器请求资源\n"),r("img",{attrs:{src:s(386),alt:"markdown",title:"markdown"}})]),t._v(" "),r("h2",{attrs:{id:"_3-dns域名解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-dns域名解析"}},[t._v("#")]),t._v(" 3. DNS域名解析")]),t._v(" "),r("p",[t._v("我们知道在地址栏输入的域名并不是最后资源所在的真实位置，域名只是与IP地址的一个映射。网络服务器的IP地址那么多，我们不可能去记一串串的数字，因此域名就产生了，"),r("strong",[t._v("域名解析的过程实际是将域名还原为IP地址的过程")]),t._v("。\n首先浏览器先检查本地hosts文件是否有这个网址映射关系，如果有就调用这个IP地址映射，完成域名解析。")]),t._v(" "),r("p",[t._v("如果没找到则会查找本地DNS解析器缓存，如果查找到则返回。")]),t._v(" "),r("p",[t._v("如果还是没有找到则会查找本地DNS服务器，如果查找到则返回。")]),t._v(" "),r("p",[t._v("最后迭代查询，按根域服务器 ->顶级域,.com->第二层域，baidu.com ->子域，www.baidu.com的顺序找到IP地址。")]),t._v(" "),r("h2",{attrs:{id:"_4-tcp连接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-tcp连接"}},[t._v("#")]),t._v(" 4. TCP连接")]),t._v(" "),r("p",[t._v("在通过第一步的DNS域名解析后，获取到了服务器的IP地址，在获取到IP地址后，便会开始建立一次连接，这是由TCP协议完成的，主要通过三次握手进行连接。")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("第一次握手： 建立连接时，客户端发送syn包（seq=x）到服务器，并进入SYN_SENT状态，等待服务器确认；")])]),t._v(" "),r("li",[r("p",[t._v("第二次握手： 服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（seq=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；")])]),t._v(" "),r("li",[r("p",[t._v("第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。")])])]),t._v(" "),r("h2",{attrs:{id:"_5-浏览器向服务器发送http请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-浏览器向服务器发送http请求"}},[t._v("#")]),t._v(" 5. 浏览器向服务器发送HTTP请求")]),t._v(" "),r("p",[t._v("完整的HTTP请求包含请求起始行、请求头部、请求主体三部分。\n常用的请求头部（部分）")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[t._v("Accept"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 接收类型，表示浏览器支持的"),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MIME")]),t._v("类型\n（对标服务端返回的Content"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type）\nAccept"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Encoding：浏览器支持的压缩类型"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("如gzip等"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("超出类型不能接收\nContent"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type：客户端发送出去实体内容的类型\nCache"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 指定请求和响应遵循的缓存机制，如no"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("cache\nIf"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Modified"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Since：对应服务端的Last"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Modified，用来匹配看文件是否变动，只能精确到"),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("s之内，http1"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("中\nExpires：缓存控制，在这个时间内不会请求，直接使用缓存，http1"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("，而且是服务端时间\nMax"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("age：代表资源在本地缓存多少秒，有效时间内不会请求，而是使用缓存，http1"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("中\nIf"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("None"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Match：对应服务端的ETag，用来匹配文件内容是否改变（非常精确），http1"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("中\nCookie"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 有cookie并且同域访问时会自动带上\nConnection"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 当浏览器与服务器通信时对于长连接如何进行处理"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("如keep"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("alive\nHost：请求的服务器"),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),t._v("\nOrigin：最初的请求是从哪里发起的（只会精确到端口）"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Origin比Referer更尊重隐私\nReferer：该页面的来源"),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("适用于所有类型的请求，会精确到详细页面地址，csrf拦截常用到这个字段"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nUser"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Agent：用户客户端的一些必要信息，如"),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UA")]),t._v("头部等\n")])])]),r("h2",{attrs:{id:"_6-浏览器接收服务器的响"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-浏览器接收服务器的响"}},[t._v("#")]),t._v(" 6. 浏览器接收服务器的响")]),t._v(" "),r("p",[t._v("服务器在收到浏览器发送的HTTP请求之后，会将收到的HTTP报文封装成HTTP的Request对象，并通过不同的Web服务器进行处理，处理完的结果以HTTP的Response对象返回，主要包括状态码，响应头，响应报文三个部分。\n状态码主要包括以下部分")]),t._v(" "),r("ul",[r("li",[t._v("1xx：指示信息–表示请求已接收，继续处理。")]),t._v(" "),r("li",[t._v("2xx：成功–表示请求已被成功接收、理解、接受。")]),t._v(" "),r("li",[t._v("3xx：重定向–要完成请求必须进行更进一步的操作。")]),t._v(" "),r("li",[t._v("4xx：客户端错误–请求有语法错误或请求无法实现。")]),t._v(" "),r("li",[t._v("5xx：服务器端错误–服务器未能实现合法的请求。")])]),t._v(" "),r("p",[t._v("响应头主要由Cache-Control、 Connection、Date、Pragma等组成。")]),t._v(" "),r("p",[t._v("响应体为服务器返回给浏览器的信息，主要由HTML，css，js，图片文件组成。")]),t._v(" "),r("p",[t._v("常用的响应头部（部分）：")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[t._v("Access"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Headers"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 服务器端允许的请求Headers\nAccess"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Methods"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 服务器端允许的请求方法\nAccess"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Origin"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 服务器端允许的请求Origin头部（譬如为"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("）\nContent"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type：服务端返回的实体内容的类型\nDate：数据从服务器发送的时间\nCache"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control：告诉浏览器或其他客户，什么环境可以安全的缓存文档\nLast"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Modified：请求资源的最后修改时间\nExpires：应该在什么时候认为文档已经过期"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("从而不再缓存它\nMax"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("age：客户端的本地资源应该缓存多少秒，开启了Cache"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control后有效\nETag：请求变量的实体标签的当前值\nSet"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Cookie：设置和页面关联的cookie，服务器通过这个头部把cookie传给客户端\nKeep"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Alive：如果客户端有keep"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("alive，服务端也会有响应（如timeout"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("38")]),t._v("）\nServer：服务器的一些相关信息\n")])])]),r("h2",{attrs:{id:"_7-页面渲染"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-页面渲染"}},[t._v("#")]),t._v(" 7. 页面渲染")]),t._v(" "),r("p",[t._v("前面有提到http交互，那么接下来就是浏览器获取到html，然后解析，渲染")]),t._v(" "),r("ol",[r("li",[t._v("解析HTML，构建DOM树")]),t._v(" "),r("li",[t._v("解析CSS，生成CSS规则树")]),t._v(" "),r("li",[t._v("合并DOM树和CSS规则，生成render树")]),t._v(" "),r("li",[t._v("布局render树（Layout/reflow），负责各元素尺寸、位置的计算")]),t._v(" "),r("li",[t._v("绘制render树（paint），绘制页面像素信息")]),t._v(" "),r("li",[t._v("浏览器会将各层的信息发送给GPU，GPU会将各层合成（composite），显示在屏幕上")])]),t._v(" "),r("h2",{attrs:{id:"_8-关闭tcp连接或继续保持连接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-关闭tcp连接或继续保持连接"}},[t._v("#")]),t._v(" 8. 关闭TCP连接或继续保持连接")]),t._v(" "),r("p",[t._v("通过四次挥手关闭连接(FIN ACK, ACK, FIN ACK, ACK)。")])])}),[],!1,null,null,null);a.default=e.exports}}]);