(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{405:function(a,t,s){"use strict";s.r(t);var n=s(54),v=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"call-apply-bind"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#call-apply-bind"}},[a._v("#")]),a._v(" call,apply,bind")]),a._v(" "),s("h2",{attrs:{id:"call-apply-bind的基本介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#call-apply-bind的基本介绍"}},[a._v("#")]),a._v(" call,apply,bind的基本介绍")]),a._v(" "),s("h4",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法：")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("fun")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("thisArg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" param1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" param2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("fun")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("thisArg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("param1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("param2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("fun")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("thisArg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" param1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" param2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),s("h4",{attrs:{id:"返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[a._v("#")]),a._v(" 返回值：")]),a._v(" "),s("p",[a._v("call/apply："),s("code",[a._v("fun")]),a._v("执行的结果 "),s("code",[a._v("bind")]),a._v("：返回"),s("code",[a._v("fun")]),a._v("的拷贝，并拥有指定的"),s("code",[a._v("this")]),a._v("值和初始参数")]),a._v(" "),s("h4",{attrs:{id:"参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[a._v("#")]),a._v(" 参数：")]),a._v(" "),s("p",[s("code",[a._v("thisArg")]),a._v("(可选):")]),a._v(" "),s("p",[a._v("1,"),s("code",[a._v("fun")]),a._v("的"),s("code",[a._v("this")]),a._v("指向"),s("code",[a._v("thisArg")]),a._v("对象")]),a._v(" "),s("p",[a._v("2,非严格模式下：thisArg指定为null，undefined，fun中的this指向window对象.")]),a._v(" "),s("p",[a._v("3,严格模式下："),s("code",[a._v("fun")]),a._v("的"),s("code",[a._v("this")]),a._v("为"),s("code",[a._v("undefined")])]),a._v(" "),s("p",[a._v("4,值为原始值(数字，字符串，布尔值)的this会指向该原始值的自动包装对象，如 String、Number、Boolean")]),a._v(" "),s("p",[s("code",[a._v("param1,param2")]),a._v("(可选): 传给"),s("code",[a._v("fun")]),a._v("的参数。")]),a._v(" "),s("p",[a._v("1,如果param不传或为 null/undefined，则表示不需要传入任何参数.")]),a._v(" "),s("p",[a._v("2,apply第二个参数为数组，数组内的值为传给fun的参数。")]),a._v(" "),s("h3",{attrs:{id:"调用call-apply-bind的必须是个函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调用call-apply-bind的必须是个函数"}},[a._v("#")]),a._v(" 调用"),s("code",[a._v("call")]),a._v("/"),s("code",[a._v("apply")]),a._v("/"),s("code",[a._v("bind")]),a._v("的必须是个函数")]),a._v(" "),s("p",[a._v("call、apply和bind是挂在Function对象上的三个方法,只有函数才有这些方法。")]),a._v(" "),s("p",[a._v("只要是函数就可以，比如: "),s("code",[a._v("Object.prototype.toString")]),a._v("就是个函数，我们经常看到这样的用法："),s("code",[a._v("Object.prototype.toString.call(data)")])]),a._v(" "),s("h3",{attrs:{id:"作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[a._v("#")]),a._v(" 作用")]),a._v(" "),s("p",[a._v("改变函数执行时的this指向，目前所有关于它们的运用，都是基于这一点来进行的。")]),a._v(" "),s("h4",{attrs:{id:"如何不弄混call和apply"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何不弄混call和apply"}},[a._v("#")]),a._v(" 如何不弄混call和apply")]),a._v(" "),s("blockquote",[s("p",[a._v("弄混这两个API的不在少数，不要小看这个问题，记住下面的这个方法就好了。")])]),a._v(" "),s("p",[s("code",[a._v("apply")]),a._v("是以"),s("code",[a._v("a")]),a._v("开头，它传给"),s("code",[a._v("fun")]),a._v("的参数是"),s("code",[a._v("Array")]),a._v("，也是以"),s("code",[a._v("a")]),a._v("开头的。")]),a._v(" "),s("h3",{attrs:{id:"区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[a._v("#")]),a._v(" 区别")]),a._v(" "),s("h6",{attrs:{id:"call与apply的唯一区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#call与apply的唯一区别"}},[a._v("#")]),a._v(" call与apply的唯一区别")]),a._v(" "),s("p",[a._v("传给"),s("code",[a._v("fun")]),a._v("的参数写法不同：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("apply")]),a._v("是第2个参数，这个参数是一个数组：传给"),s("code",[a._v("fun")]),a._v("参数都写在数组中。")]),a._v(" "),s("li",[s("code",[a._v("call")]),a._v("从第2~n的参数都是传给"),s("code",[a._v("fun")]),a._v("的")])]),a._v(" "),s("h6",{attrs:{id:"call-apply与bind的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#call-apply与bind的区别"}},[a._v("#")]),a._v(" call/apply与bind的区别")]),a._v(" "),s("p",[s("strong",[a._v("执行：")])]),a._v(" "),s("ul",[s("li",[a._v("call/apply改变了函数的this上下文后马上"),s("strong",[a._v("执行该函数")])]),a._v(" "),s("li",[a._v("bind则是返回改变了上下文后的函数,"),s("strong",[a._v("不执行该函数")])])]),a._v(" "),s("p",[s("strong",[a._v("返回值:")])]),a._v(" "),s("ul",[s("li",[a._v("call/apply 返回"),s("code",[a._v("fun")]),a._v("的执行结果")]),a._v(" "),s("li",[a._v("bind返回fun的拷贝，并指定了fun的this指向，保存了fun的参数。")])]),a._v(" "),s("h3",{attrs:{id:"call、apply-该用哪个-、"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#call、apply-该用哪个-、"}},[a._v("#")]),a._v(" call、apply，该用哪个？、")]),a._v(" "),s("ul",[s("li",[a._v("参数数量/顺序确定就用call，参数数量/顺序不确定的话就用apply。")]),a._v(" "),s("li",[a._v("考虑可读性：参数数量不多就用call，参数数量比较多的话，把参数整合成数组，使用apply。")]),a._v(" "),s("li",[a._v("参数集合已经是一个数组的情况，用apply，比如上文的获取数组最大值/最小值。")])])])}),[],!1,null,null,null);t.default=v.exports}}]);